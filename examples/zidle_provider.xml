<?xml version="1.0" encoding="UTF-8"?>
<provider_guide>
  <processing_rules>
    <rule>Each <action> maps to a meta_action (EXECUTE_READ, EXECUTE_TRANSACTION, or GRAPHQL_FETCH)</rule>
    <rule>The daydream_action determines which system action to use</rule>
    <rule>Parameters from the XML need to be transformed to match the Dreams action schema</rule>
    <rule>Always follow the rules in <important_rules>, especially checking NFT first</rule>
  </processing_rules>

  <important_rules>
    <rule>All actions require CHECK_NFT to be called first to get token_id_low</rule>
    <rule>Always verify transaction responses before proceeding</rule>
    <rule>Follow error handling guidelines for retries</rule>
    <rule>Never use token_id_high, always use token_id_low</rule>
  </important_rules>

  <available_actions>
    <action name="CHECK_NFT">
      <purpose>Check if wallet has NFT. Must be called first.</purpose>
      <implementation>
        <daydream_action>EXECUTE_READ</daydream_action>
        <contract>$CHARACTER_NFT</contract>
        <entrypoint>token_of_owner_by_index</entrypoint>
        <params>
          <param position="0" value="$WALLET_ADDRESS" />
          <param position="1" value="1" />
          <param position="2" value="0" />
        </params>
      </implementation>
      <returns>u256 [token_id_low, token_id_high]</returns>
    </action>

    <action name="MINE_RCS">
      <purpose>Start mining a resource</purpose>
      <implementation>
        <daydream_action>EXECUTE_TRANSACTION</daydream_action>
        <contract>$RESOURCES_SYSTEM</contract>
        <entrypoint>mine</entrypoint>
        <params>
          <param position="0" value="$TOKEN_ID_LOW" description="token_id_low from CHECK_NFT[0]" />
          <param position="1" value="$RESOURCE_TYPE" description="1:Wood, 2:Food, 3:Mineral" />
          <param position="2" value="$RESOURCE_SUBTYPE" description="sub resource tier" />
        </params>
      </implementation>
    </action>

    <action name="HARVEST_RCS">
      <purpose>Harvest currently mined resource</purpose>
      <implementation>
        <daydream_action>EXECUTE_TRANSACTION</daydream_action>
        <contract>$RESOURCES_SYSTEM</contract>
        <entrypoint>harvest</entrypoint>
        <params>
          <param position="0" value="$TOKEN_ID_LOW" description="token_id_low from CHECK_NFT[0]" />
          <param position="1" value="$RESOURCE_TYPE" description="same as mining type" />
        </params>
      </implementation>
    </action>
  </available_actions>

  <available_queries>
    <query name="CHECK_MINING">
      <purpose>Check if NFT is currently mining any resource</purpose>
      <implementation>
        <daydream_action>GRAPHQL_FETCH</daydream_action>
        <query>
          query ZidleMinerModels {
            zidleMinerModels(where: { token_id: $TOKEN_ID_LOW, timestampGT: "0" }) {
              edges {
                node {
                  token_id
                  resource_type
                  xp
                }
              }
              totalCount
            }
          }
        </query>
        <params>
          <param position="0" value="$TOKEN_ID_LOW" description="token_id_low from CHECK_NFT[0]" />
        </params>
      </implementation>
      <result_interpretation>
        <case condition="totalCount == 0">Not currently mining any resource</case>
        <case condition="totalCount > 0">Currently mining resource type (1:Wood, 2:Food, 3:Mineral)</case>
      </result_interpretation>
    </query>

    <query name="CHECK_XP">
      <purpose>Get current XP levels for each resource type</purpose>
      <implementation>
        <daydream_action>GRAPHQL_FETCH</daydream_action>
        <query>
          query ZidleXPModels {
            zidleMinerModels(where: { token_id: $TOKEN_ID_LOW }) {
              totalCount
              edges {
                node {
                  resource_type
                  xp
                }
              }
            }
          }
        </query>
        <params>
          <param position="0" value="$TOKEN_ID_LOW" description="token_id_low from CHECK_NFT[0]" />
        </params>
      </implementation>
      <result_interpretation>
        <case condition="totalCount == 0">New character: all resource types start at 0 XP</case>
        <case condition="totalCount > 0">XP per resource type (1:Wood, 2:Food, 3:Mineral)</case>
      </result_interpretation>
    </query>
  </available_queries>
</provider_guide>